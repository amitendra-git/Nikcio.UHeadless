schema {
  query: Query
}

"A base for property values"
interface PropertyValue {
  "The model of the property value"
  model: String!
}

"The member queries"
type Query {
  "Gets all the content items available."
  contentAll("The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicContentFilterInput order: [BasicContentSortInput!]): ContentAllConnection
  "Gets all the content items at root level."
  contentAtRoot("The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicContentFilterInput order: [BasicContentSortInput!]): ContentAtRootConnection
  "Gets a content item by an absolute route."
  contentByAbsoluteRoute("The route to fetch. Example '\/da\/frontpage\/'." route: String! "The base url for the request. Example: 'https:\/\/localhost:4000'. Default is the current domain" baseUrl: String! = "" "The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Modes for requesting by route" routeMode: RouteMode! = ROUTING where: BasicContentFilterInput order: [BasicContentSortInput!]): BasicContent
  "Gets a content item by guid."
  contentByGuid("The id to fetch." id: UUID! "The culture to fetch." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false where: BasicContentFilterInput order: [BasicContentSortInput!]): BasicContent
  "Gets a content item by id."
  contentById("The id to fetch." id: Int! "The culture to fetch." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false where: BasicContentFilterInput order: [BasicContentSortInput!]): BasicContent
  "Gets content items by tag."
  contentByTag("The tag to fetch." tag: String! "The tag group to fetch." tagGroup: String "The culture to fetch." culture: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicContentFilterInput order: [BasicContentSortInput!]): ContentByTagConnection
  "Gets content item descendants by an absolute route."
  contentDescendantsByAbsoluteRoute("The route to fetch. Example '\/da\/frontpage\/'." route: String! "The base url for the request. Example: 'https:\/\/localhost:4000'. Default is the current domain" baseUrl: String! = "" "The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Modes for requesting by route" routeMode: RouteMode! = ROUTING "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicContentFilterInput order: [BasicContentSortInput!]): ContentDescendantsByAbsoluteRouteConnection
  "Gets all descendants of content items with a specific content type."
  contentDescendantsByContentType("The contentType to fetch." contentType: String! "The culture." culture: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicContentFilterInput order: [BasicContentSortInput!]): ContentDescendantsByContentTypeConnection
  "Gets descendants on a content item selected by guid."
  contentDescendantsByGuid("The id to fetch." id: UUID! "The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicContentFilterInput order: [BasicContentSortInput!]): ContentDescendantsByGuidConnection
  "Gets descendants on a content item selected by id."
  contentDescendantsById("The id to fetch." id: Int! "The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicContentFilterInput order: [BasicContentSortInput!]): ContentDescendantsByIdConnection
  "Gets all the content items properties at root level."
  propertiesAtRoot("The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicPropertyFilterInput order: [BasicPropertySortInput!]): PropertiesAtRootConnection
  "Get properties by content guid."
  propertiesByGuid("The guid of the content item." id: UUID! "The culture of the content item." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicPropertyFilterInput): PropertiesByGuidConnection
  "Get properties based by content id."
  propertiesById("The id of the content item." id: Int! "The culture of the content item." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicPropertyFilterInput): PropertiesByIdConnection
  "Get properties by content route."
  propertiesByRoute("The route of the content item." route: String! "The culture of the content item." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicPropertyFilterInput): PropertiesByRouteConnection
  "Gets properties all the content items by content type."
  propertiesByContentType("The contentType to fetch." contentType: String! "The culture." culture: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicPropertyFilterInput order: [BasicPropertySortInput!]): PropertiesByContentTypeConnection
  "Gets all the Media items at root level."
  mediaAtRoot("The culture." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput order: [BasicMediaOfBasicPropertyAndBasicContentTypeSortInput!]): MediaAtRootConnection
  "Gets a Media item by guid."
  mediaByGuid("The id to fetch." id: UUID! "The culture to fetch." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false where: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput order: [BasicMediaOfBasicPropertyAndBasicContentTypeSortInput!]): BasicMediaOfBasicPropertyAndBasicContentType
  "Gets a Media item by id."
  mediaById("The id to fetch." id: Int! "The culture to fetch." culture: String "Fetch preview values. Preview will show unpublished items." preview: Boolean! = false where: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput order: [BasicMediaOfBasicPropertyAndBasicContentTypeSortInput!]): BasicMediaOfBasicPropertyAndBasicContentType
  "Gets all the media items by content type."
  mediaByContentType("The contentType to fetch." contentType: String! "The culture." culture: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput order: [BasicMediaOfBasicPropertyAndBasicContentTypeSortInput!]): MediaByContentTypeConnection
  "Gets a member by id."
  memberById("The id to fetch." id: Int! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): BasicMember
  "Gets all members by filter and\/or pageindex."
  allMembers("The current page index." pageIndex: Long! "The page size." pageSize: Int! "The field to order by." orderBy: String! "The direction to order by." orderDirection: Direction! "The member type alias to search for." memberTypeAlias: String "The search text filter." filter: String "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): [BasicMember]!
  "Gets members by id."
  membersById("The ids to fetch." ids: [Int!]! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): [BasicMember]!
  "Gets a member by email."
  memberByEmail("The email to fetch." email: String! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): BasicMember
  "Gets a member by key."
  memberByKey("The key to fetch." key: UUID! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): BasicMember
  "Gets a member by username."
  memberByUsername("The username to fetch." username: String! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): BasicMember
  "Finds members by username."
  findMembersByUsername("The username (may be partial)." username: String! "The page index." pageIndex: Long! "The page size." pageSize: Int! "Determines how to match a string property value." matchType: StringPropertyMatchType! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): [BasicMember]!
  "Finds members by email."
  findMembersByEmail("The email (may be partial)." email: String! "The page index." pageIndex: Long! "The page size." pageSize: Int! "Determines how to match a string property value." matchType: StringPropertyMatchType! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): [BasicMember]!
  "Finds members by display name."
  findMembersByDisplayName("The display name (may be partial)." displayName: String! "The page index." pageIndex: Long! "The page size." pageSize: Int! "Determines how to match a string property value." matchType: StringPropertyMatchType! "The culture." culture: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): [BasicMember]!
  "Finds members by role."
  findMembersByRole("The role name." roleName: String! "The username to match." usernameToMatch: String! "Determines how to match a string property value." matchType: StringPropertyMatchType! "The culture." culture: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BasicMemberFilterInput order: [BasicMemberSortInput!]): FindMembersByRoleConnection
}

"Represents a basic property value."
type BasicPropertyValue implements PropertyValue {
  "Gets the value of the property."
  value: Any
  "The model of the property value"
  model: String!
}

"Represents a block list model."
type BasicBlockListModel implements PropertyValue {
  "Gets the blocks of a block list model."
  blocks: [BasicBlockListItem!]
  "The model of the property value"
  model: String!
}

"Represents nested content."
type BasicNestedContent implements PropertyValue {
  "Gets the elements of a nested content."
  elements: [BasicNestedContentElement!]
  "The model of the property value"
  model: String!
}

"Represents a rich text editor."
type BasicRichText implements PropertyValue {
  "Gets the HTML value of the rich text editor or markdown editor."
  value: String
  "Gets the original value of the rich text editor or markdown editor."
  sourceValue: String
  "The model of the property value"
  model: String!
}

"Represents a member picker."
type BasicMemberPicker implements PropertyValue {
  "Gets the members."
  members: [BasicMemberPickerItem!]!
  "The model of the property value"
  model: String!
}

"Represents a content picker value."
type BasicContentPicker implements PropertyValue {
  "Gets the list of content."
  contentList: [BasicContentPickerItem!]!
  "The model of the property value"
  model: String!
}

"Represents a multi url picker."
type BasicMultiUrlPicker implements PropertyValue {
  "Gets the links."
  links: [BasicMultiUrlPickerItem!]!
  "The model of the property value"
  model: String!
}

"Represents a media picker item."
type BasicMediaPicker implements PropertyValue {
  "Gets the media items of a picker."
  mediaItems: [BasicMediaPickerItem!]!
  "The model of the property value"
  model: String!
}

"Represents a date time property value."
type BasicDateTimePicker implements PropertyValue {
  "Gets the value of the property."
  value: DateTime
  "The model of the property value"
  model: String!
}

"Represents a date time property value."
type BasicLabel implements PropertyValue {
  "Gets the value of the property."
  value: Any
  "The model of the property value"
  model: String!
}

"Represents an unsupported property value."
type BasicUnsupportedPropertyValue implements PropertyValue {
  "Gets the message of the property."
  message: String!
  "The model of the property value"
  model: String!
}

scalar Any

"Represents a content item."
input BasicContentFilterInput {
  and: [BasicContentFilterInput!]
  or: [BasicContentFilterInput!]
  "Gets the identifier of the template to use to render the content item."
  templateId: IntOperationFilterInput
  "Gets the parent of the content item."
  parent: BasicContentFilterInput
  "Gets the type of the content item (document, media...)."
  itemType: NullableOfPublishedItemTypeOperationFilterInput
  "Gets available culture infos."
  cultures: ListFilterInputTypeOfKeyValuePairOfStringAndPublishedCultureInfoFilterInput
  "Gets the date the content item was last updated."
  updateDate: DateTimeOperationFilterInput
  "Gets the identifier of the user who last updated the content item."
  writerId: IntOperationFilterInput
  "Gets the date that the content was created."
  createDate: DateTimeOperationFilterInput
  "Gets the identifier of the user who created the content item."
  creatorId: IntOperationFilterInput
  "Gets all the children of the content item, regardless of whether they are available for the current culture."
  childrenForAllCultures: ListFilterInputTypeOfBasicContentFilterInput
  "Gets the tree path of the content item."
  path: StringOperationFilterInput
  "Gets the tree level of the content item."
  level: IntOperationFilterInput
  "Gets the sort order of the content item."
  sortOrder: IntOperationFilterInput
  "Gets the URL segment of the content item for the current culture."
  urlSegment: StringOperationFilterInput
  "Gets the url of the content item."
  url: StringOperationFilterInput
  "Gets the absolute url of the content item."
  absoluteUrl: StringOperationFilterInput
  "Gets the name of the content item for the current culture."
  name: StringOperationFilterInput
  "Gets the unique identifier of the content item."
  id: IntOperationFilterInput
  "Gets the children of the content item that are available for the current culture."
  children: ListFilterInputTypeOfBasicContentFilterInput
  "Gets the content type."
  contentType: BasicContentTypeFilterInput
  "Gets the unique key of the element."
  key: UuidOperationFilterInput
  "Gets the properties of the element."
  properties: ListFilterInputTypeOfBasicPropertyFilterInput
  "Gets the redirect information."
  redirect: BasicContentRedirectFilterInput
}

"Represents a content item."
input BasicContentSortInput {
  "Gets the identifier of the template to use to render the content item."
  templateId: SortEnumType
  "Gets the parent of the content item."
  parent: BasicContentSortInput
  "Gets the type of the content item (document, media...)."
  itemType: SortEnumType
  "Gets the date the content item was last updated."
  updateDate: SortEnumType
  "Gets the identifier of the user who last updated the content item."
  writerId: SortEnumType
  "Gets the date that the content was created."
  createDate: SortEnumType
  "Gets the identifier of the user who created the content item."
  creatorId: SortEnumType
  "Gets the tree path of the content item."
  path: SortEnumType
  "Gets the tree level of the content item."
  level: SortEnumType
  "Gets the sort order of the content item."
  sortOrder: SortEnumType
  "Gets the URL segment of the content item for the current culture."
  urlSegment: SortEnumType
  "Gets the url of the content item."
  url: SortEnumType
  "Gets the absolute url of the content item."
  absoluteUrl: SortEnumType
  "Gets the name of the content item for the current culture."
  name: SortEnumType
  "Gets the unique identifier of the content item."
  id: SortEnumType
  "Gets the content type."
  contentType: BasicContentTypeSortInput
  "Gets the unique key of the element."
  key: SortEnumType
  "Gets the redirect information."
  redirect: BasicContentRedirectSortInput
}

"A connection to a list of items."
type ContentAllConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContentAllEdge!]
  "A flattened list of the nodes."
  nodes: [BasicContent]
}

"A connection to a list of items."
type ContentAtRootConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContentAtRootEdge!]
  "A flattened list of the nodes."
  nodes: [BasicContent]
}

"A connection to a list of items."
type ContentByTagConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContentByTagEdge!]
  "A flattened list of the nodes."
  nodes: [BasicContent]
}

"A connection to a list of items."
type ContentDescendantsByAbsoluteRouteConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContentDescendantsByAbsoluteRouteEdge!]
  "A flattened list of the nodes."
  nodes: [BasicContent]
}

"A connection to a list of items."
type ContentDescendantsByContentTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContentDescendantsByContentTypeEdge!]
  "A flattened list of the nodes."
  nodes: [BasicContent]
}

"A connection to a list of items."
type ContentDescendantsByGuidConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContentDescendantsByGuidEdge!]
  "A flattened list of the nodes."
  nodes: [BasicContent]
}

"A connection to a list of items."
type ContentDescendantsByIdConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContentDescendantsByIdEdge!]
  "A flattened list of the nodes."
  nodes: [BasicContent]
}

"Represents a property."
input BasicPropertyFilterInput {
  and: [BasicPropertyFilterInput!]
  or: [BasicPropertyFilterInput!]
  "Gets the alias of a property."
  alias: StringOperationFilterInput
  "Gets the value of a property."
  value: PropertyValueFilterInput
  "Gets the editor alias of a property."
  editorAlias: StringOperationFilterInput
}

"Represents a property."
input BasicPropertySortInput {
  "Gets the alias of a property."
  alias: SortEnumType
  "Gets the value of a property."
  value: PropertyValueSortInput
  "Gets the editor alias of a property."
  editorAlias: SortEnumType
}

"A connection to a list of items."
type PropertiesAtRootConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertiesAtRootEdge!]
  "A flattened list of the nodes."
  nodes: [[BasicProperty]]
}

"A connection to a list of items."
type PropertiesByGuidConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertiesByGuidEdge!]
  "A flattened list of the nodes."
  nodes: [BasicProperty]
}

"A connection to a list of items."
type PropertiesByIdConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertiesByIdEdge!]
  "A flattened list of the nodes."
  nodes: [BasicProperty]
}

"A connection to a list of items."
type PropertiesByRouteConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertiesByRouteEdge!]
  "A flattened list of the nodes."
  nodes: [BasicProperty]
}

"A connection to a list of items."
type PropertiesByContentTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertiesByContentTypeEdge!]
  "A flattened list of the nodes."
  nodes: [[BasicProperty]]
}

"Represents a Media item."
input BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput {
  and: [BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput!]
  or: [BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput!]
  "Gets the identifier of the template to use to render the Media item."
  templateId: IntOperationFilterInput
  "Gets the parent of the Media item."
  parent: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput
  "Gets the type of the Media item (document, media...)."
  itemType: NullableOfPublishedItemTypeOperationFilterInput
  "Gets available culture infos."
  cultures: ListFilterInputTypeOfKeyValuePairOfStringAndPublishedCultureInfoFilterInput
  "Gets the date the Media item was last updated."
  updateDate: DateTimeOperationFilterInput
  "Gets the identifier of the user who last updated the Media item."
  writerId: IntOperationFilterInput
  "Gets the date that the Media was created."
  createDate: DateTimeOperationFilterInput
  "Gets the identifier of the user who created the Media item."
  creatorId: IntOperationFilterInput
  "Gets all the children of the Media item, regardless of whether they are available for the current culture."
  childrenForAllCultures: ListFilterInputTypeOfBasicMediaOfBasicPropertyAndBasicContentTypeFilterInput
  "Gets the tree path of the Media item."
  path: StringOperationFilterInput
  "Gets the tree level of the Media item."
  level: IntOperationFilterInput
  "Gets the sort order of the Media item."
  sortOrder: IntOperationFilterInput
  "Gets the URL segment of the Media item for the current culture."
  urlSegment: StringOperationFilterInput
  "Gets the url of the Media item."
  url: StringOperationFilterInput
  "Gets the absolute url of the Media item."
  absoluteUrl: StringOperationFilterInput
  "Gets the name of the Media item for the current culture."
  name: StringOperationFilterInput
  "Gets the unique identifier of the Media item."
  id: IntOperationFilterInput
  "Gets the children of the Media item that are available for the current culture."
  children: ListFilterInputTypeOfBasicMediaOfBasicPropertyAndBasicContentTypeFilterInput
  "Gets the content type."
  contentType: BasicContentTypeFilterInput
  "Gets the unique key of the element."
  key: UuidOperationFilterInput
  "Gets the properties of the element."
  properties: ListFilterInputTypeOfBasicPropertyFilterInput
}

"Represents a Media item."
input BasicMediaOfBasicPropertyAndBasicContentTypeSortInput {
  "Gets the identifier of the template to use to render the Media item."
  templateId: SortEnumType
  "Gets the parent of the Media item."
  parent: BasicMediaOfBasicPropertyAndBasicContentTypeSortInput
  "Gets the type of the Media item (document, media...)."
  itemType: SortEnumType
  "Gets the date the Media item was last updated."
  updateDate: SortEnumType
  "Gets the identifier of the user who last updated the Media item."
  writerId: SortEnumType
  "Gets the date that the Media was created."
  createDate: SortEnumType
  "Gets the identifier of the user who created the Media item."
  creatorId: SortEnumType
  "Gets the tree path of the Media item."
  path: SortEnumType
  "Gets the tree level of the Media item."
  level: SortEnumType
  "Gets the sort order of the Media item."
  sortOrder: SortEnumType
  "Gets the URL segment of the Media item for the current culture."
  urlSegment: SortEnumType
  "Gets the url of the Media item."
  url: SortEnumType
  "Gets the absolute url of the Media item."
  absoluteUrl: SortEnumType
  "Gets the name of the Media item for the current culture."
  name: SortEnumType
  "Gets the unique identifier of the Media item."
  id: SortEnumType
  "Gets the content type."
  contentType: BasicContentTypeSortInput
  "Gets the unique key of the element."
  key: SortEnumType
}

"A connection to a list of items."
type MediaAtRootConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MediaAtRootEdge!]
  "A flattened list of the nodes."
  nodes: [BasicMediaOfBasicPropertyAndBasicContentType]
}

"A connection to a list of items."
type MediaByContentTypeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MediaByContentTypeEdge!]
  "A flattened list of the nodes."
  nodes: [BasicMediaOfBasicPropertyAndBasicContentType]
}

"Represents a member"
input BasicMemberFilterInput {
  and: [BasicMemberFilterInput!]
  or: [BasicMemberFilterInput!]
  "The member id"
  id: IntOperationFilterInput
  "The member parent id"
  parentId: IntOperationFilterInput
  "The member content type id"
  contentTypeId: IntOperationFilterInput
  "The member content type alias"
  contentTypeAlias: StringOperationFilterInput
  "The member create date"
  createDate: DateTimeOperationFilterInput
  "The member creator id"
  creatorId: IntOperationFilterInput
  "The member key"
  key: UuidOperationFilterInput
  "The member level"
  level: IntOperationFilterInput
  "The member name"
  name: StringOperationFilterInput
  "The members path"
  path: StringOperationFilterInput
  "The members properties"
  properties: ListFilterInputTypeOfBasicPropertyFilterInput
  "The member sort order"
  sortOrder: IntOperationFilterInput
  "The member writer id"
  writerId: IntOperationFilterInput
}

"Represents a member"
input BasicMemberSortInput {
  "The member id"
  id: SortEnumType
  "The member parent id"
  parentId: SortEnumType
  "The member content type id"
  contentTypeId: SortEnumType
  "The member content type alias"
  contentTypeAlias: SortEnumType
  "The member create date"
  createDate: SortEnumType
  "The member creator id"
  creatorId: SortEnumType
  "The member key"
  key: SortEnumType
  "The member level"
  level: SortEnumType
  "The member name"
  name: SortEnumType
  "The members path"
  path: SortEnumType
  "The member sort order"
  sortOrder: SortEnumType
  "The member writer id"
  writerId: SortEnumType
}

"A connection to a list of items."
type FindMembersByRoleConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FindMembersByRoleEdge!]
  "A flattened list of the nodes."
  nodes: [BasicMember]
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input NullableOfPublishedItemTypeOperationFilterInput {
  eq: PublishedItemType
  neq: PublishedItemType
  in: [PublishedItemType]
  nin: [PublishedItemType]
}

input ListFilterInputTypeOfKeyValuePairOfStringAndPublishedCultureInfoFilterInput {
  all: KeyValuePairOfStringAndPublishedCultureInfoFilterInput
  none: KeyValuePairOfStringAndPublishedCultureInfoFilterInput
  some: KeyValuePairOfStringAndPublishedCultureInfoFilterInput
  any: Boolean
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ListFilterInputTypeOfBasicContentFilterInput {
  all: BasicContentFilterInput
  none: BasicContentFilterInput
  some: BasicContentFilterInput
  any: Boolean
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

"Represents a content type."
input BasicContentTypeFilterInput {
  and: [BasicContentTypeFilterInput!]
  or: [BasicContentTypeFilterInput!]
  "Gets the unique key for the content type."
  key: UuidOperationFilterInput
  "Gets the content type identifier."
  id: IntOperationFilterInput
  "Gets the content type alias."
  alias: StringOperationFilterInput
  "Gets the content item type."
  itemType: PublishedItemTypeOperationFilterInput
  "Gets the aliases of the content types participating in the composition."
  compositionAliases: ListStringOperationFilterInput
  "Gets the content variations of the content type."
  variations: ContentVariationOperationFilterInput
  "Gets a value indicating whether this content type is for an element."
  isElement: BooleanOperationFilterInput
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ListFilterInputTypeOfBasicPropertyFilterInput {
  all: BasicPropertyFilterInput
  none: BasicPropertyFilterInput
  some: BasicPropertyFilterInput
  any: Boolean
}

"Represents a content redirect"
input BasicContentRedirectFilterInput {
  and: [BasicContentRedirectFilterInput!]
  or: [BasicContentRedirectFilterInput!]
  "The url to redirect to"
  redirectUrl: StringOperationFilterInput
  "Is the redirect permanent"
  isPermanent: BooleanOperationFilterInput
}

enum SortEnumType {
  ASC
  DESC
}

"Represents a content type."
input BasicContentTypeSortInput {
  "Gets the unique key for the content type."
  key: SortEnumType
  "Gets the content type identifier."
  id: SortEnumType
  "Gets the content type alias."
  alias: SortEnumType
  "Gets the content item type."
  itemType: SortEnumType
  "Gets the content variations of the content type."
  variations: SortEnumType
  "Gets a value indicating whether this content type is for an element."
  isElement: SortEnumType
}

"Represents a content redirect"
input BasicContentRedirectSortInput {
  "The url to redirect to"
  redirectUrl: SortEnumType
  "Is the redirect permanent"
  isPermanent: SortEnumType
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"Represents a content item."
type BasicContent {
  "Gets the identifier of the template to use to render the content item."
  templateId: Int
  "Gets the parent of the content item."
  parent: BasicContent
  "Gets the type of the content item (document, media...)."
  itemType: PublishedItemType
  "Gets available culture infos."
  cultures: [KeyValuePairOfStringAndPublishedCultureInfo!]
  "Gets the date the content item was last updated."
  updateDate: DateTime
  "Gets the identifier of the user who last updated the content item."
  writerId: Int
  "Gets the date that the content was created."
  createDate: DateTime
  "Gets the identifier of the user who created the content item."
  creatorId: Int
  "Gets all the children of the content item, regardless of whether they are available for the current culture."
  childrenForAllCultures(where: BasicContentFilterInput order: [BasicContentSortInput!]): [BasicContent]
  "Gets the tree path of the content item."
  path: String
  "Gets the tree level of the content item."
  level: Int
  "Gets the sort order of the content item."
  sortOrder: Int
  "Gets the URL segment of the content item for the current culture."
  urlSegment: String
  "Gets the url of the content item."
  url: String
  "Gets the absolute url of the content item."
  absoluteUrl: String
  "Gets the name of the content item for the current culture."
  name: String
  "Gets the unique identifier of the content item."
  id: Int
  "Gets the children of the content item that are available for the current culture."
  children(where: BasicContentFilterInput order: [BasicContentSortInput!]): [BasicContent]
  "Gets the content type."
  contentType: BasicContentType
  "Gets the unique key of the element."
  key: UUID
  "Gets the properties of the element."
  properties(where: BasicPropertyFilterInput): [BasicProperty]
  "Gets the redirect information."
  redirect: BasicContentRedirect
}

"An edge in a connection."
type ContentAllEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicContent
}

"An edge in a connection."
type ContentAtRootEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicContent
}

"An edge in a connection."
type ContentByTagEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicContent
}

"An edge in a connection."
type ContentDescendantsByAbsoluteRouteEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicContent
}

"An edge in a connection."
type ContentDescendantsByContentTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicContent
}

"An edge in a connection."
type ContentDescendantsByGuidEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicContent
}

"An edge in a connection."
type ContentDescendantsByIdEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicContent
}

"A base for property values"
input PropertyValueFilterInput {
  and: [PropertyValueFilterInput!]
  or: [PropertyValueFilterInput!]
  "The model of the property value"
  model: StringOperationFilterInput
}

"A base for property values"
input PropertyValueSortInput {
  "The model of the property value"
  model: SortEnumType
}

"Represents a property."
type BasicProperty {
  "Gets the alias of a property."
  alias: String
  "Gets the value of a property."
  value: PropertyValue
  "Gets the editor alias of a property."
  editorAlias: String
}

"An edge in a connection."
type PropertiesAtRootEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: [BasicProperty]
}

"An edge in a connection."
type PropertiesByGuidEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicProperty
}

"An edge in a connection."
type PropertiesByIdEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicProperty
}

"An edge in a connection."
type PropertiesByRouteEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicProperty
}

"An edge in a connection."
type PropertiesByContentTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: [BasicProperty]
}

input ListFilterInputTypeOfBasicMediaOfBasicPropertyAndBasicContentTypeFilterInput {
  all: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput
  none: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput
  some: BasicMediaOfBasicPropertyAndBasicContentTypeFilterInput
  any: Boolean
}

"Represents a Media item."
type BasicMediaOfBasicPropertyAndBasicContentType {
  "Gets the identifier of the template to use to render the Media item."
  templateId: Int
  "Gets the parent of the Media item."
  parent: BasicMediaOfBasicPropertyAndBasicContentType
  "Gets the type of the Media item (document, media...)."
  itemType: PublishedItemType
  "Gets available culture infos."
  cultures: [KeyValuePairOfStringAndPublishedCultureInfo!]
  "Gets the date the Media item was last updated."
  updateDate: DateTime
  "Gets the identifier of the user who last updated the Media item."
  writerId: Int
  "Gets the date that the Media was created."
  createDate: DateTime
  "Gets the identifier of the user who created the Media item."
  creatorId: Int
  "Gets all the children of the Media item, regardless of whether they are available for the current culture."
  childrenForAllCultures: [BasicMediaOfBasicPropertyAndBasicContentType]
  "Gets the tree path of the Media item."
  path: String
  "Gets the tree level of the Media item."
  level: Int
  "Gets the sort order of the Media item."
  sortOrder: Int
  "Gets the URL segment of the Media item for the current culture."
  urlSegment: String
  "Gets the url of the Media item."
  url: String
  "Gets the absolute url of the Media item."
  absoluteUrl: String
  "Gets the name of the Media item for the current culture."
  name: String
  "Gets the unique identifier of the Media item."
  id: Int
  "Gets the children of the Media item that are available for the current culture."
  children: [BasicMediaOfBasicPropertyAndBasicContentType]
  "Gets the content type."
  contentType: BasicContentType
  "Gets the unique key of the element."
  key: UUID
  "Gets the properties of the element."
  properties(where: BasicPropertyFilterInput): [BasicProperty]
}

"An edge in a connection."
type MediaAtRootEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicMediaOfBasicPropertyAndBasicContentType
}

"An edge in a connection."
type MediaByContentTypeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicMediaOfBasicPropertyAndBasicContentType
}

"Represents a member"
type BasicMember {
  "The member id"
  id: Int
  "The member parent id"
  parentId: Int
  "The member content type id"
  contentTypeId: Int
  "The member content type alias"
  contentTypeAlias: String
  "The member create date"
  createDate: DateTime
  "The member creator id"
  creatorId: Int
  "The member key"
  key: UUID
  "The member level"
  level: Int
  "The member name"
  name: String
  "The members path"
  path: String
  "The members properties"
  properties: [BasicProperty]
  "The member sort order"
  sortOrder: Int
  "The member writer id"
  writerId: Int
}

"An edge in a connection."
type FindMembersByRoleEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicMember
}

input KeyValuePairOfStringAndPublishedCultureInfoFilterInput {
  and: [KeyValuePairOfStringAndPublishedCultureInfoFilterInput!]
  or: [KeyValuePairOfStringAndPublishedCultureInfoFilterInput!]
  key: StringOperationFilterInput
  value: PublishedCultureInfoFilterInput
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

input PublishedItemTypeOperationFilterInput {
  eq: PublishedItemType
  neq: PublishedItemType
  in: [PublishedItemType!]
  nin: [PublishedItemType!]
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input ContentVariationOperationFilterInput {
  eq: ContentVariation
  neq: ContentVariation
  in: [ContentVariation!]
  nin: [ContentVariation!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

scalar UUID

input PublishedCultureInfoFilterInput {
  and: [PublishedCultureInfoFilterInput!]
  or: [PublishedCultureInfoFilterInput!]
  culture: StringOperationFilterInput
  name: StringOperationFilterInput
  urlSegment: StringOperationFilterInput
  date: DateTimeOperationFilterInput
}

enum ContentVariation {
  NOTHING
  CULTURE
  SEGMENT
  CULTURE_AND_SEGMENT
}

"Represents a content redirect"
type BasicContentRedirect {
  "The url to redirect to"
  redirectUrl: String!
  "Is the redirect permanent"
  isPermanent: Boolean!
}

"Represents a content type."
type BasicContentType {
  "Gets the unique key for the content type."
  key: UUID!
  "Gets the content type identifier."
  id: Int!
  "Gets the content type alias."
  alias: String
  "Gets the content item type."
  itemType: PublishedItemType!
  "Gets the aliases of the content types participating in the composition."
  compositionAliases: [String!]
  "Gets the content variations of the content type."
  variations: ContentVariation!
  "Gets a value indicating whether this content type is for an element."
  isElement: Boolean!
}

enum StringPropertyMatchType {
  EXACT
  CONTAINS
  STARTS_WITH
  ENDS_WITH
  WILDCARD
}

enum Direction {
  ASCENDING
  DESCENDING
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

enum PublishedItemType {
  UNKNOWN
  ELEMENT
  CONTENT
  MEDIA
  MEMBER
}

"Modes for requesting by route"
enum RouteMode {
  "Cache only will only look in the content cache for the url"
  CACHE_ONLY
  "Routing will use routing to determine a route. This will also show redirects"
  ROUTING
  "Routing or cache will first use routing to find content and then use the cache if none is found. This also shows redirects"
  ROUTING_OR_CACHE
  "Cache or routing will first use the content cache to find content and then use routing. This will only find redirects if no content is found in the content cache"
  CACHE_OR_ROUTING
}

type KeyValuePairOfStringAndPublishedCultureInfo {
  key: String!
  value: PublishedCultureInfo!
}

"Represents a media item."
type BasicMediaPickerItem {
  "Gets the absolute url of a media item."
  url: String!
  "Gets the id of a media item."
  id: Int!
}

"Represents a link item."
type BasicMultiUrlPickerItem {
  "Gets the name of the link."
  name: String
  "Gets the target of the link."
  target: String
  "Gets the type of the link."
  type: LinkType!
  "Gets the url of a link."
  url: String
}

"Represents a content picker item."
type BasicContentPickerItem {
  "Gets the url segment of the content item."
  urlSegment: String
  "Gets the url of a content item."
  url: String!
  "Gets the absolute url of a content item."
  absoluteUrl: String!
  "Gets the name of a content item."
  name: String
  "Gets the id of a content item."
  id: Int!
  "Gets the key of a content item."
  key: UUID!
}

"Represents a member item."
type BasicMemberPickerItem {
  "Gets the id of the member."
  id: Int
  "Gets the name of a member."
  name: String
  "Gets the properties of a member."
  properties: [BasicProperty]!
}

"Represents nested content."
type BasicNestedContentElement {
  "Gets the properties of the nested content."
  properties: [BasicProperty]!
}

"Represents a block list item."
type BasicBlockListItem {
  "Gets the content properties of the block list item."
  contentProperties: [BasicProperty]!
  "Gets the setting properties of the block list item."
  settingsProperties: [BasicProperty]!
  "Gets the alias of the content block list item."
  contentAlias: String
  "Gets the alias of the settings block list item."
  settingsAlias: String
}

enum LinkType {
  CONTENT
  MEDIA
  EXTERNAL
}

type PublishedCultureInfo {
  culture: String!
  name: String!
  urlSegment: String
  date: DateTime!
}